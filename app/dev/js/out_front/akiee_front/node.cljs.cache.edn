{:rename-macros {}, :renames {}, :externs {isNaN {}, parseInt {}}, :use-macros {join clojure.string, is cljs.test, deftest cljs.test, trim clojure.string}, :excludes #{}, :name akiee-front.node, :imports nil, :requires {nj cljs.nodejs, fo akiee-front.fileoperations, dd akiee-front.datadefinitions, cljs.test cljs.test, akiee-front.datadefinitions akiee-front.datadefinitions, akiee-front.constants akiee-front.constants, cljs.nodejs cljs.nodejs, s clojure.string, clojure.string clojure.string, akiee-front.fileoperations akiee-front.fileoperations}, :uses {join clojure.string, DOING akiee-front.constants, DONE akiee-front.constants, trim clojure.string, TODO akiee-front.constants, ALL akiee-front.constants}, :defs {->repeat {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 71, :column 7, :end-line 71, :end-column 15, :arglists (quote ([s])), :doc "String -> RepeatInfo\n  consumes a String s with repeat information, parses this String and produces a RepeatInfo"}, :name akiee-front.node/->repeat, :variadic false, :file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "String -> RepeatInfo\n  consumes a String s with repeat information, parses this String and produces a RepeatInfo"}, ->nodes {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 189, :column 7, :end-line 189, :end-column 14, :arglists (quote ([p])), :doc "String -> ListOfNodes\n  consumes the path p to the task file and produces a list of nodes\n  TODO find way to test, without :key"}, :name akiee-front.node/->nodes, :variadic false, :file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :end-column 14, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 189, :end-line 189, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "String -> ListOfNodes\n  consumes the path p to the task file and produces a list of nodes\n  TODO find way to test, without :key"}, ->node {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 124, :column 7, :end-line 124, :end-column 13, :arglists (quote ([ts hl pro r])), :doc "TaskState String String -> Node\n  Consumes a TaskState ts a headline hl, a project pro, a Rank r;\n  creates a node"}, :name akiee-front.node/->node, :variadic false, :file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :end-column 13, :method-params ([ts hl pro r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ts hl pro r])), :doc "TaskState String String -> Node\n  Consumes a TaskState ts a headline hl, a project pro, a Rank r;\n  creates a node"}, n1 {:name akiee-front.node/n1, :file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 271, :column 1, :end-line 271, :end-column 8, :meta {:file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 271, :column 6, :end-line 271, :end-column 8}, :tag any}, ->timestamp {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 196, :column 7, :end-line 196, :end-column 18, :arglists (quote ([d])), :doc "Date -> String\n  consumes a clojurescript date and produces a org-mode timestamp"}, :name akiee-front.node/->timestamp, :variadic false, :file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :end-column 18, :method-params ([d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 196, :end-line 196, :max-fixed-arity 1, :fn-var true, :arglists (quote ([d])), :doc "Date -> String\n  consumes a clojurescript date and produces a org-mode timestamp"}, week {:name akiee-front.node/week, :file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 18, :column 1, :end-line 18, :end-column 10, :meta {:file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 18, :column 6, :end-line 18, :end-column 10}, :tag cljs.core/IVector}, ->nodes-from-md {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 180, :column 7, :end-line 180, :end-column 22, :arglists (quote ([md])), :doc "String -> ListOfNodes\nconsumes a task file markdown string and produces a list of nodes\n  TODO find way to test, without :key"}, :name akiee-front.node/->nodes-from-md, :variadic false, :file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :end-column 22, :method-params ([md]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 180, :end-line 180, :max-fixed-arity 1, :fn-var true, :arglists (quote ([md])), :doc "String -> ListOfNodes\nconsumes a task file markdown string and produces a list of nodes\n  TODO find way to test, without :key"}, n3 {:name akiee-front.node/n3, :file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 273, :column 1, :end-line 273, :end-column 8, :meta {:file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 273, :column 6, :end-line 273, :end-column 8}, :tag any}, reps-string {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 258, :column 7, :end-line 258, :end-column 18, :arglists (quote ([n])), :doc "Node -> String\n  Consumes a Node n and produces the Repeat String based on the n's RepeatInfo"}, :name akiee-front.node/reps-string, :variadic false, :file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :end-column 18, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 258, :end-line 258, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Node -> String\n  Consumes a Node n and produces the Repeat String based on the n's RepeatInfo"}, higher-rank? {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 226, :column 7, :end-line 226, :end-column 19, :arglists (quote ([n1 n2])), :doc "Node Node -> Boolean\n  Determens if Node n1 has a higher Rank than Node n2"}, :name akiee-front.node/higher-rank?, :variadic false, :file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :end-column 19, :method-params ([n1 n2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 226, :end-line 226, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n1 n2])), :doc "Node Node -> Boolean\n  Determens if Node n1 has a higher Rank than Node n2"}, lon->md {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 207, :column 7, :end-line 207, :end-column 14, :arglists (quote ([lon]))}, :name akiee-front.node/lon->md, :variadic false, :file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :end-column 14, :method-params ([lon]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 207, :end-line 207, :max-fixed-arity 1, :fn-var true, :arglists (quote ([lon]))}, n4 {:name akiee-front.node/n4, :file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 274, :column 1, :end-line 274, :end-column 8, :meta {:file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 274, :column 6, :end-line 274, :end-column 8}, :tag any}, array->vec {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 57, :column 7, :end-line 57, :end-column 17, :arglists (quote ([v a])), :doc "JsArray Vector -> Vector\n  consumes a javascript array a and Vector v and produces a vector\n  TODO make this more robust and general"}, :name akiee-front.node/array->vec, :variadic false, :file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :end-column 17, :method-params ([v a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v a])), :doc "JsArray Vector -> Vector\n  consumes a javascript array a and Vector v and produces a vector\n  TODO make this more robust and general"}, n2 {:name akiee-front.node/n2, :file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 272, :column 1, :end-line 272, :end-column 8, :meta {:file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 272, :column 6, :end-line 272, :end-column 8}, :tag any}, tags-string {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 246, :column 7, :end-line 246, :end-column 18, :arglists (quote ([n])), :doc "Node -> String\n  Consumes a Node n and produces the comma seperated String based on the n's tags"}, :name akiee-front.node/tags-string, :variadic false, :file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :end-column 18, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 246, :end-line 246, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Node -> String\n  Consumes a Node n and produces the comma seperated String based on the n's tags"}, node= {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 32, :column 7, :end-line 32, :end-column 12, :arglists (quote ([n1 n2])), :doc "Node Node -> Boolean\n  Compares 2 Nodes n1 n2, the :key of the nodes is ignored,\n  because it's random"}, :name akiee-front.node/node=, :variadic false, :file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :end-column 12, :method-params ([n1 n2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n1 n2])), :doc "Node Node -> Boolean\n  Compares 2 Nodes n1 n2, the :key of the nodes is ignored,\n  because it's random"}, org {:name akiee-front.node/org, :file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 12, :column 1, :end-line 12, :end-column 9, :meta {:file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 12, :column 6, :end-line 12, :end-column 9}, :tag any}, newer-date? {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 236, :column 7, :end-line 236, :end-column 18, :arglists (quote ([n1 n2])), :doc "Date Date -> Boolean\n   Determens if Node n1 has a higher Rank than Node n2"}, :name akiee-front.node/newer-date?, :variadic false, :file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :end-column 18, :method-params ([n1 n2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 236, :end-line 236, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n1 n2])), :doc "Date Date -> Boolean\n   Determens if Node n1 has a higher Rank than Node n2"}, project-helper {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 158, :column 9, :end-line 158, :end-column 23, :arglists (quote ([lon n pr]))}, :name akiee-front.node/project-helper, :variadic false, :file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :end-column 23, :method-params ([lon n pr]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 158, :end-line 158, :max-fixed-arity 3, :fn-var true, :arglists (quote ([lon n pr]))}, project {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 154, :column 7, :end-line 154, :end-column 14, :arglists (quote ([lon n])), :doc "ListOfNodes Node String -> String\n  Consumes a lon, a Node n and a project name pr returns the project of n"}, :name akiee-front.node/project, :variadic false, :file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :end-column 14, :method-params ([lon n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 2, :fn-var true, :arglists (quote ([lon n])), :doc "ListOfNodes Node String -> String\n  Consumes a lon, a Node n and a project name pr returns the project of n"}, lon {:name akiee-front.node/lon, :file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 164, :column 1, :end-line 164, :end-column 9, :meta {:file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 164, :column 6, :end-line 164, :end-column 9}, :tag cljs.core/IVector}, jsnode->node {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 96, :column 7, :end-line 96, :end-column 19, :arglists (quote ([jn])), :doc "JsNode -> Node\n  consumes a javascript org-node (object) jn and produces a node\n  TODO make this more robust and general"}, :name akiee-front.node/jsnode->node, :variadic false, :file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :end-column 19, :method-params ([jn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists (quote ([jn])), :doc "JsNode -> Node\n  consumes a javascript org-node (object) jn and produces a node\n  TODO make this more robust and general"}, parse-file {:name akiee-front.node/parse-file, :file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 14, :column 1, :end-line 14, :end-column 16, :meta {:file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 14, :column 6, :end-line 14, :end-column 16}, :tag any}, ->key {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :line 25, :column 7, :end-line 25, :end-column 12, :arglists (quote ([])), :doc "Nil -> String\n  Returns a unique key for new nodes"}, :name akiee-front.node/->key, :variadic false, :file "/home/macco/Listings/electron-akiee/akiee/src_front/akiee_front/node.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Nil -> String\n  Returns a unique key for new nodes"}}, :require-macros {cljs.test cljs.test}, :cljs.analyzer/constants {:seen #{:properties ->repeat :tags :headline dd/N1a = ->node n1 :key :else :unit dd/N2 get :rank n3 :type higher-rank? :drawer :rate lon->md n4 :style :level array->vec dd/jsN1 :fail js* n2 tags-string :priority :project not :expected :todo node= :scheduled :repeat :error dd/N1 :tag :pass project :actual :body lon :deadline jsnode->node ->key TODO :message :fin}, :order [:type :expected :actual :message :error ->key :pass :fail not :level :headline :body :tag :tags :todo :priority :scheduled :deadline :fin :properties :drawer :rank :repeat :style = node= dd/N1 dd/N1a dd/N2 array->vec js* :else :rate :unit ->repeat :key jsnode->node dd/jsN1 :project ->node TODO project lon get lon->md tags-string higher-rank? n2 n1 n3 n4]}, :doc nil}