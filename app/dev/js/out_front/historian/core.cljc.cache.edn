{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name historian.core, :imports nil, :requires nil, :uses nil, :defs {replace-prophecy! {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 127, :column 7, :end-line 127, :end-column 24, :arglists (quote ([new-atom])), :doc "The prophecy atom (where all records are kept to enable 'redo')\n  will be replaced by the new-atom. Useful if you've already done some\n  modifications to the new-atom (like added some watchers).\n\n  Usually used with `replace-library'."}, :name historian.core/replace-prophecy!, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 24, :method-params ([new-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 1, :fn-var true, :arglists (quote ([new-atom])), :doc "The prophecy atom (where all records are kept to enable 'redo')\n  will be replaced by the new-atom. Useful if you've already done some\n  modifications to the new-atom (like added some watchers).\n\n  Usually used with `replace-library'."}, can-redo? {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 170, :column 7, :end-line 170, :end-column 16, :arglists (quote ([])), :doc "Can we redo?"}, :name historian.core/can-redo?, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Can we redo?"}, different-from-last? {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 52, :column 8, :end-line 52, :end-column 28, :private true, :arglists (quote ([new]))}, :private true, :name historian.core/different-from-last?, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 28, :method-params ([new]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([new]))}, can-redo?* {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 92, :column 8, :end-line 92, :end-column 18, :private true, :arglists (quote ([records]))}, :private true, :name historian.core/can-redo?*, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 18, :method-params ([records]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([records]))}, alexandria {:name historian.core/alexandria, :file "app/dev/js/out_front/historian/core.cljc", :line 6, :column 1, :end-line 6, :end-column 16, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 6, :column 6, :end-line 6, :end-column 16}, :doc "The great library... store your stuff here.", :tag any}, undo! {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 174, :column 7, :end-line 174, :end-column 12, :arglists (quote ([]))}, :name historian.core/undo!, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 174, :end-line 174, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, redo! {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 185, :column 7, :end-line 185, :end-column 12, :arglists (quote ([]))}, :name historian.core/redo!, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, replace-library! {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 115, :column 7, :end-line 115, :end-column 23, :arglists (quote ([new-atom])), :doc "The library atom (where all records are kept to enable 'undo') will\n  be replaced by the new-atom. Useful if you've already done some\n  modifications to the new-atom (like added some watchers). Depending\n  on where you use this function, you might want to fire a\n  `trigger-record!' just after.\n  \n  Usually, one would also want to use `replace-prophecy!' in order to\n  replace the 'redo' atom."}, :name historian.core/replace-library!, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 23, :method-params ([new-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 1, :fn-var true, :arglists (quote ([new-atom])), :doc "The library atom (where all records are kept to enable 'undo') will\n  be replaced by the new-atom. Useful if you've already done some\n  modifications to the new-atom (like added some watchers). Depending\n  on where you use this function, you might want to fire a\n  `trigger-record!' just after.\n  \n  Usually, one would also want to use `replace-prophecy!' in order to\n  replace the 'redo' atom."}, save-prophecies! {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 63, :column 8, :end-line 63, :end-column 24, :private true, :arglists (quote ([snaps]))}, :private true, :name historian.core/save-prophecies!, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 24, :method-params ([snaps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([snaps]))}, stop-all-records! {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 158, :column 7, :end-line 158, :end-column 24, :arglists (quote ([])), :doc "Remove all the atoms from the overseer watch. The atoms will no\n  longer be watched, nor any of their state saved to history."}, :name historian.core/stop-all-records!, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Remove all the atoms from the overseer watch. The atoms will no\n  longer be watched, nor any of their state saved to history."}, watch! {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 76, :column 8, :end-line 76, :end-column 14, :private true, :arglists (quote ([atm]))}, :private true, :name historian.core/watch!, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 14, :method-params ([atm]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 1, :fn-var true, :arglists (quote ([atm]))}, different-from? {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 44, :column 8, :end-line 44, :end-column 23, :private true, :arglists (quote ([new old])), :doc "Check if any non-passive snapshot is different."}, :private true, :name historian.core/different-from?, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 23, :method-params ([new old]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([new old])), :doc "Check if any non-passive snapshot is different."}, nostradamus {:name historian.core/nostradamus, :file "app/dev/js/out_front/historian/core.cljc", :line 13, :column 1, :end-line 13, :end-column 17, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 13, :column 6, :end-line 13, :end-column 17}, :doc "What will happen in the future...", :tag any}, stop-record! {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 151, :column 7, :end-line 151, :end-column 19, :arglists (quote ([k])), :doc "Remove the atom associated to this key from the overseer watch.\n  This atom will no longer be watched, nor its state saved to\n  history."}, :name historian.core/stop-record!, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 19, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "Remove the atom associated to this key from the overseer watch.\n  This atom will no longer be watched, nor its state saved to\n  history."}, can-undo? {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 166, :column 7, :end-line 166, :end-column 16, :arglists (quote ([])), :doc "Do we have enough history to undo?"}, :name historian.core/can-undo?, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Do we have enough history to undo?"}, get-library-atom {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 10, :column 7, :end-line 10, :end-column 23, :arglists (quote ([]))}, :name historian.core/get-library-atom, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, get-prophecy-atom {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 17, :column 7, :end-line 17, :end-column 24, :arglists (quote ([]))}, :name historian.core/get-prophecy-atom, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, remove-watch! {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 83, :column 8, :end-line 83, :end-column 21, :private true, :arglists (quote ([a]))}, :private true, :name historian.core/remove-watch!, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 21, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a]))}, save-if-different! {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 58, :column 8, :end-line 58, :end-column 26, :private true, :arglists (quote ([snaps]))}, :private true, :name historian.core/save-if-different!, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 26, :method-params ([snaps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([snaps]))}, overwrite-record! {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 107, :column 7, :end-line 107, :end-column 24, :arglists (quote ([] [snaps])), :doc "Overwrite the last historic entry with a new one.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [snaps]), :arglists ([] [snaps]), :arglists-meta (nil nil)}}, :name historian.core/overwrite-record!, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 24, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [snaps]), :arglists ([] [snaps]), :arglists-meta (nil nil)}, :method-params ([] [snaps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists ([] [snaps]), :doc "Overwrite the last historic entry with a new one."}, take-snapshots {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 41, :column 8, :end-line 41, :end-column 22, :private true, :arglists (quote ([]))}, :private true, :name historian.core/take-snapshots, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, trigger-record! {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 100, :column 7, :end-line 100, :end-column 22, :arglists (quote ([])), :doc "Trigger a record to history. The current state of at least one atom\n  must be different from the previous one for the record to be\n  included into history."}, :name historian.core/trigger-record!, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Trigger a record to history. The current state of at least one atom\n  must be different from the previous one for the record to be\n  included into history."}, *record-active* {:name historian.core/*record-active*, :file "app/dev/js/out_front/historian/core.cljc", :line 66, :column 1, :end-line 66, :end-column 31, :dynamic true, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 66, :column 16, :end-line 66, :end-column 31, :dynamic true}, :tag boolean}, record! {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 136, :column 7, :end-line 136, :end-column 14, :arglists (quote ([atm k] [atm k passive?])), :doc "Add the atom to the overseer watch. When any of the atom under its\n  watch is modified, it triggers a save of every atom to history (if\n  any of the atom is different form the last historic state). Return\n  the atom.\n  \n  If `passive?' is true, the atom will NOT trigger any new save and\n  will only be saved when another atom under watch is modified.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([atm k] [atm k passive?]), :arglists ([atm k] [atm k passive?]), :arglists-meta (nil nil)}}, :name historian.core/record!, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([atm k] [atm k passive?]), :arglists ([atm k] [atm k passive?]), :arglists-meta (nil nil)}, :method-params ([atm k] [atm k passive?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 3, :fn-var true, :arglists ([atm k] [atm k passive?]), :doc "Add the atom to the overseer watch. When any of the atom under its\n  watch is modified, it triggers a save of every atom to history (if\n  any of the atom is different form the last historic state). Return\n  the atom.\n  \n  If `passive?' is true, the atom will NOT trigger any new save and\n  will only be saved when another atom under watch is modified."}, snapshot {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 32, :column 8, :end-line 32, :end-column 16, :private true, :arglists (quote ([k]))}, :private true, :name historian.core/snapshot, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 16, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, can-undo?* {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 86, :column 8, :end-line 86, :end-column 18, :private true, :arglists (quote ([records]))}, :private true, :name historian.core/can-undo?*, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 18, :method-params ([records]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists (quote ([records]))}, save-snapshots! {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 55, :column 8, :end-line 55, :end-column 23, :private true, :arglists (quote ([snaps]))}, :private true, :name historian.core/save-snapshots!, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 23, :method-params ([snaps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([snaps]))}, overseer {:name historian.core/overseer, :file "app/dev/js/out_front/historian/core.cljc", :line 20, :column 1, :end-line 20, :end-column 14, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 20, :column 6, :end-line 20, :end-column 14}, :doc "Who should we record?", :tag any}, register-atom! {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 24, :column 8, :end-line 24, :end-column 22, :private true, :arglists (quote ([atom k] [atom k passive?])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([atom k] [atom k passive?]), :arglists ([atom k] [atom k passive?]), :arglists-meta (nil nil)}}, :private true, :name historian.core/register-atom!, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([atom k] [atom k passive?]), :arglists ([atom k] [atom k passive?]), :arglists-meta (nil nil)}, :method-params ([atom k] [atom k passive?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 3, :fn-var true, :arglists ([atom k] [atom k passive?])}, restore! {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 68, :column 8, :end-line 68, :end-column 16, :private true, :arglists (quote ([snaps])), :doc "Restore all the atoms being watched to a previous/different state."}, :private true, :name historian.core/restore!, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 16, :method-params ([snaps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([snaps])), :doc "Restore all the atoms being watched to a previous/different state."}, clear-history! {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 193, :column 7, :end-line 193, :end-column 21, :arglists (quote ([]))}, :name historian.core/clear-history!, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 193, :end-line 193, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, de-register-atom! {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 29, :column 8, :end-line 29, :end-column 25, :private true, :arglists (quote ([k]))}, :private true, :name historian.core/de-register-atom!, :variadic false, :file "app/dev/js/out_front/historian/core.cljc", :end-column 25, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, with-single-before-and-after {:protocol-inline nil, :meta {:file "/home/macco/Listings/electron-akiee/akiee/app/dev/js/out_front/historian/core.cljc", :line 213, :column 11, :end-line 213, :end-column 39, :macro true, :arglists (quote ([& content])), :doc "Deactivate the watches write to history and execute the body. If\n  any non-passive atom is modified, replace the last history with a\n  snapshot taken just before executing the body and then take another\n  snapshot.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env content)], :arglists ([&form &env & content]), :arglists-meta (nil)}}, :name historian.core/with-single-before-and-after, :variadic true, :file "app/dev/js/out_front/historian/core.cljc", :end-column 39, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env content)], :arglists ([&form &env & content]), :arglists-meta (nil)}, :method-params [(&form &env content)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 213, :macro true, :end-line 213, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & content]), :doc "Deactivate the watches write to history and execute the body. If\n  any non-passive atom is modified, replace the last history with a\n  snapshot taken just before executing the body and then take another\n  snapshot."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{cljs.core/when :key before-snaps__27973__auto__ :value historian.core/off-the-record :passive? after-snaps__27974__auto__ historian.core/overwrite-record! historian.core/different-from? cljs.core/let historian.core/trigger-record! historian.core/take-snapshots :atom :historian.core/historian-watch :timestamp :clj}, :order [:atom :passive? :value :key :timestamp :historian.core/historian-watch :clj cljs.core/let before-snaps__27973__auto__ historian.core/take-snapshots historian.core/off-the-record after-snaps__27974__auto__ cljs.core/when historian.core/different-from? historian.core/overwrite-record! historian.core/trigger-record!]}, :doc "Manage states for your atoms. (Easy undo/redo)"}